(* ****** ****** *)

Dao's anti-movement!!!

(* ****** ****** *)
//
// HX-2018-02-14:
//
implicit coercion: x <: int
//
(* ****** ****** *)
//
// HX-2018-02-12:
//
extern
fun
{a:type}
list_length : {n:int} list(a, n) -> int(n)

implement
{a}(*tmp*)
list_length(nil()) = 0
|
list_length(cons(_, xs)) = 1 + list_length<a>(xs)
//
(* ****** ****** *)
//
// HX-2018-02-11:
//
Support for
highlighting the types of subexpressions
//
(* ****** ****** *)
(*
HX-2018-02-10
*)
fun
myfun() = let
//
  x = 1;
  y = 1 + 2;
  z = x * y;
//
extern
fun
foo() = #macdef"%"

extern
fun
{a:type}
foo(nil()) = 0
|
foo(cons(_, xs)) = 1 + f(x)
withtype
{n:int} .<n>. (list(a, n)) -> int(n)

in
  println! ("x = ", x, " and y = ", y, " and z = ", z)
end
//
(* ****** ****** *)
//
// HX-2018-02-10:
//
Some support for
implicit casting of integers
For instance, using 0 for size_t
//
(* ****** ****** *)
//
// HX-2018-02-06:
//
A flag of some sort to
determine whether default templates
are to be used to raise exceptions?
//
(* ****** ****** *)
//
// HX-2018-01-27:
//
Using type for t@ype
Using tbox for boxed type
//
Deprecate:
abst@ype, absvt@ype, etc.
//
abstbox mytype // boxed
abstype mytype // unboxed
//
abst@ype = atstype
absvt@ype = abstype
//
xatscc ... // Using ATS3 syntax
xatscc --ATS2 ... // Using ATS2 syntax
//
Flags for choosing prelude libraries?
Flags for assigning types to constants?
//
Keywords for declarations:
  val
  rec x =
  lam () => x() + 1
  fn
  fnt
  fnx
  fun
  prf val
  prf fn
  prf fnt
  prf fun
//
Support for utf-8 identifiers?
Support extensible syntax? // print!, fprint!, ...
How about something like let! as follows:
let!
  x = x + 1
  y = x + x
in
  // ....
end // end of [let!]
//
(* ****** ****** *)
//
// HX-2018-01-13:
//
// Staging support for handling
// arguments that are known at compile-time
//
// val rep =
// sprintf(##format("x = %i and y = %s"))(1)("A")
//
(* ****** ****** *)
//
// HX-2017-12-14:
//
// Should we bring the
// interpreter for ATS back?
//
(* ****** ****** *)
//
// HX-2017-12-11:
//
// For collecting some thoughts
// on ATS-Xanadu (that is, ATS3)
//
(* ****** ****** *)
//
// HX-2017-12-11:
//
Yes, meta-programming! But how?!
//
(* ****** ****** *)
//
// HX-2017-12-11:
//
`Yes, aggressive code mobility. But how?!
//
(* ****** ****** *)
//
// HX-2017-12-11:
//
extern
fun
{a:type}{n:nat}
list_tabulate(int(n)): list(a, n)
and
list_tabulate$fopr(i: natLt(n)): (a)
//
(* ****** ****** *)
//
extern
fun
{a:type}
list_tabulate_fun
{n:nat}
( n0: int(n)
, f0: natLt(n) -> a): list(a, n)
//
implement
{a}(*tmp*)
list_tabulate_fun
{n}(n0, f0) = let
//
implement
list_tabulate$fopr<a><n>
  (i) = f0(i)
//
in
  list_tabulate<a><n>(n0)
end // end of [list_tabulate_fun]

(* ****** ****** *)

(* end of [NOTES.txt] *)
